[
  {
    "title": "Creating a new project",
    "markdown": "Getting startedInstallationOn this pageCreating a new projectPrerequisites‚Äã\nTo use Remotion, you need at least Node 16 or Bun 1.0.3.\nScaffolding a new project‚Äã\nnoteüêß Linux distros need at least version 2.35 of Libc.\nThey also need to install some additional packages.\nnpmbunpnpmyarnUse npm as the package managerbashnpx create-video@latest\nUse npm as the package managerbashnpx create-video@latestUse pnpm as the package managerbashpnpm create video\nUse pnpm as the package managerbashpnpm create videoUse Yarn as the package managerbashyarn create video\nUse Yarn as the package managerbashyarn create videoUse Bun as the package manager and runtimebashbun create video\nUse Bun as the package manager and runtimebashbun create videonoteBun as a runtime is mostly supported. Read more here.\nChoose the template that is most suitable for you.\nFor your first project, we recommend the Hello World template.\nRegular templatesNext.js + Remix templatesAfter the project has been scaffolded, we recommend to open the project in your text editor and starting the Remotion Studio:bashnpm run dev\nbashnpm run devAfter the project has been scaffolded, we recommend to open the project in your text editor and starting the app:bashnpm run dev\nbashnpm run devTo start the Remotion Studio:bashnpm run remotion\nbashnpm run remotion\nInstallation in existing projects‚Äã\nWant to install Remotion in an existing project? Go here instead: Installation in existing projectsImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024NextThe fundamentalsPrerequisitesScaffolding a new projectInstallation in existing projects"
  },
  {
    "title": "Bun support",
    "markdown": "MiscellaneousBun supportOn this pageBun supportRemotion is excited about Bun, and we mostly support it (from v1.0.3).\nAs a package manager‚Äã\nYou can use bun i to initialize all of our Remotion templates.\nTo scaffold a new project with bun, use:\nbun create video\nbun create video\nThis command sets all scripts to use bunx remotionb which will use Bun as a runtime.\nChange remotionb to remotion if you want to use Node.js as a runtime.\nRemotion CLI‚Äã\nIf you want to run the Remotion CLI using Bun, use remotionb instead of the remotion command.\nIt doesn't matter if you prefix remotionb with npx, bunx or another runner command.\nnpx remotionb render\nnpx remotionb render\nAs a runtime‚Äã\nAs of Bun 1.0.24 and Remotion 4.0.88, the following issues are known:\n\n‚ö†Ô∏è The lazyComponent prop on \u003cComposition\u003e and \u003cPlayer\u003e does not work, and this feature is automatically disabled.\n‚ö†Ô∏è A server-side rendering script may not quit automatically after it is done running.\n\nFeel free to file more issues with Remotion if you find them.\nPrevious issues listed here have been resolved as of Bun 1.0.24.\nFor contributors‚Äã\nStart the example testbed using bun run start-bun.\nSee also‚Äã\n\nDeno support\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024Previous--gl flagNextDeno supportAs a package managerRemotion CLIAs a runtimeFor contributorsSee also"
  },
  {
    "title": "Can I render videos in the browser?",
    "markdown": "FAQBrowser renderingOn this pageCan I render videos in the browser?Rendering videos in the browser is not supported. In order to render videos, you need to hook up server-side rendering, Remotion Lambda, or render videos locally.\nWill it be supported in the future?‚Äã\nCurrently there is no browser API that allows to capture the viewport. There are some proposed APIs for it.\nIf such an API gets introduced, we can consider supporting browser rendering in the future.\nWhy not...‚Äã\na Chrome extension?‚Äã\nChrome extensions do get the privilege of capturing the viewport. We may explore this in the future, but the combination of asking the user to install an extension and slow render times means we are not prioritizing this feature.\ncanvas.getImageData()?‚Äã\nIt allows to capture the pixels from a canvas, however Remotion videos can be written with any web technology including HTML and SVG. Canvas elements are just a subset of what's supported in Remotion.\nhtml2canvas?‚Äã\nIt implements it's own rendering engine which only supports a subset of CSS properties.\nYou would only have access to a very limited feature set.\nSVG \u003cforeignElement\u003e?‚Äã\nYou can render HTML markup inside an SVG \u003cforeignElement\u003e and then render that SVG to a canvas and then call getImageData() to turn that into an image.\nThis is the closest thing to browser rendering, however there are problems with \u003cimg\u003e tags and potentially other technologies as well. It's not yet fully out of the questions, but seems hacky so far.\nHow can I avoid server-rendering?‚Äã\nWe cannot fully avoid server-rendering, but we are taking initiatives to make it easier and efficient:\n\nRemotion Lambda is a batteries-included renderer for Remotion that you only have to pay for when you use it.\n\nSee also‚Äã\n\n\u003cPlayer\u003e: Displaying a Remotion video in the browser without encoding it\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousAI System PromptNextAutomatic durationWill it be supported in the future?Why not...a Chrome extension?canvas.getImageData()?html2canvas?SVG \u003cforeignElement\u003e?How can I avoid server-rendering?See also"
  },
  {
    "title": "Creating a new project",
    "markdown": "Getting startedInstallationOn this pageCreating a new projectPrerequisites‚Äã\nTo use Remotion, you need at least Node 16 or Bun 1.0.3.\nScaffolding a new project‚Äã\nnoteüêß Linux distros need at least version 2.35 of Libc.\nThey also need to install some additional packages.\nnpmbunpnpmyarnUse npm as the package managerbashnpx create-video@latest\nUse npm as the package managerbashnpx create-video@latestUse pnpm as the package managerbashpnpm create video\nUse pnpm as the package managerbashpnpm create videoUse Yarn as the package managerbashyarn create video\nUse Yarn as the package managerbashyarn create videoUse Bun as the package manager and runtimebashbun create video\nUse Bun as the package manager and runtimebashbun create videonoteBun as a runtime is mostly supported. Read more here.\nChoose the template that is most suitable for you.\nFor your first project, we recommend the Hello World template.\nRegular templatesNext.js + Remix templatesAfter the project has been scaffolded, we recommend to open the project in your text editor and starting the Remotion Studio:bashnpm run dev\nbashnpm run devAfter the project has been scaffolded, we recommend to open the project in your text editor and starting the app:bashnpm run dev\nbashnpm run devTo start the Remotion Studio:bashnpm run remotion\nbashnpm run remotion\nInstallation in existing projects‚Äã\nWant to install Remotion in an existing project? Go here instead: Installation in existing projectsImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024NextThe fundamentalsPrerequisitesScaffolding a new projectInstallation in existing projects"
  },
  {
    "title": "TailwindCSS",
    "markdown": "ToolingTailwindCSSOn this pageTailwindCSSUsing the CLI‚Äã\nThe easiest way to get started with Tailwind is by scaffolding a new video using the CLI and selecting a template that supports adding Tailwind automatically.\nnpmbunpnpmyarnbashnpx create-video@latest\nbashnpx create-video@latestbashpnpm create video\nbashpnpm create videobashbun create video\nbashbun create videobashyarn create video\nbashyarn create video\nThe following templates support scaffolding with TailwindCSS: Hello WorldBlankHello World (JavaScript)AudiogramOverlayStargazerTikTok\nInstall in existing project‚Äã\nfrom v3.3.95, see instructions for older versions\n\nInstall @remotion/tailwind package and TailwindCSS dependencies.\n\nnpmyarnpnpmbashnpm i -D @remotion/tailwind\nbashnpm i -D @remotion/tailwindbashyarn add -D @remotion/tailwind\nbashyarn add -D @remotion/tailwindbashpnpm i -D @remotion/tailwind\nbashpnpm i -D @remotion/tailwind\n\nAdd the Webpack override from @remotion/tailwind to your config file:\n\nremotion.config.tstsimport {Config} from '@remotion/cli/config';import {enableTailwind} from '@remotion/tailwind';¬†Config.overrideWebpackConfig((currentConfiguration) =\u003e {  return enableTailwind(currentConfiguration);});\nremotion.config.tstsimport {Config} from '@remotion/cli/config';import {enableTailwind} from '@remotion/tailwind';¬†Config.overrideWebpackConfig((currentConfiguration) =\u003e {  return enableTailwind(currentConfiguration);});\nnotePrior to v3.3.39, the option was called Config.Bundling.overrideWebpackConfig().\n\n\nIf you use the bundle() or deploySite() Node.JS API, add the Webpack override to it as well.\n\n\nCreate a file src/style.css with the following content:\n\n\nsrc/style.csscss@tailwind base;@tailwind components;@tailwind utilities;\nsrc/style.csscss@tailwind base;@tailwind components;@tailwind utilities;\n\nImport the stylesheet in your src/Root.tsx file. Add to the top of the file:\n\nsrc/Root.tsxjsimport './style.css';\nsrc/Root.tsxjsimport './style.css';\n\nAdd a tailwind.config.js file to the root of your project:\n\ntailwind.config.jsjs/* eslint-env node */module.exports = {  content: ['./src/**/*.{ts,tsx}'],  theme: {    extend: {},  },  plugins: [],};\ntailwind.config.jsjs/* eslint-env node */module.exports = {  content: ['./src/**/*.{ts,tsx}'],  theme: {    extend: {},  },  plugins: [],};\n\nEnsure your package.json does not have \"sideEffects\": false set. If it has, declare that CSS files have a side effect:\n\npackage.jsondiff{// Only if `\"sideEffects\": false` exists in your package.json.-  \"sideEffects\": false+  \"sideEffects\": [\"*.css\"]}\npackage.jsondiff{// Only if `\"sideEffects\": false` exists in your package.json.-  \"sideEffects\": false+  \"sideEffects\": [\"*.css\"]}\n\nStart using TailwindCSS! You can verify that it's working by adding className=\"bg-red-900\" to any element.\n\nnoteYour package manager might show a peer dependency warning. You can safely ignore it or add strict-peer-dependencies=false to your .npmrc to suppress it.\nSee also‚Äã\n\nTailwindCSS v2 (legacy)\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousIntegration into VueNextEnvironment variablesUsing the CLIInstall in existing projectSee also"
  },
  {
    "title": "@remotion/webcodecs",
    "markdown": "WebCodecsOn this page@remotion/webcodecsavailable from v4.0.229\nThis package provides APIs for converting videos in the browser.\nIt leverages @remotion/media-parser to parse the video and audio data, and then uses the WebCodecs API to encode the video.\n\nWhat can you to with this package?‚Äã\nIn browsers that implement WebCodecs, you can use this package to:\n\nConvert videos from one format to another (.mp4 and .webm bidirectional, .avi, .mkv, .mov as import)\nRotate videos\nExtract audio from a video\nManipulate the pixels of a video\nFix videos that were recorded with MediaRecorder\nSoon: Compress, trim, crop videos\n\nüíº License Disclaimer‚Äã\nThis package is licensed under the Remotion License.We consider a team of 4 or more people a \"company\".For \"companies\": A Remotion Company license needs to be obtained to use this package. In a future version of @remotion/webcodecs, this package will also require the purchase of a newly created \"WebCodecs Conversion Seat\". Get in touch with us if you are planning to use this package.For individuals and teams up to 3: You can use this package for free.This is a short, non-binding explanation of our license. See the License itself for more details.\nüöß Unstable API Warning‚Äã\nThis package is experimental.We might change the API at any time, until we remove this notice.\nInstallation‚Äã\nnpmyarnpnpmbunnpm i --save-exact @remotion/webcodecs@4.0.241Copynpm i --save-exact @remotion/webcodecs@4.0.241Copypnpm i @remotion/webcodecs@4.0.241Copypnpm i @remotion/webcodecs@4.0.241Copybun i @remotion/webcodecs@4.0.241Copybun i @remotion/webcodecs@4.0.241Copyyarn --exact add @remotion/webcodecs@4.0.241Copyyarn --exact add @remotion/webcodecs@4.0.241CopyThis assumes you are currently using v4.0.241 of Remotion.Also update remotion and all `@remotion/*` packages to the same version.Remove all ^ character in front of the version numbers of it as it can lead to a version conflict.\nGuide‚Äã\nConvert a videofrom one format to anotherRotate a videoFix bad orientationFix a MediaRecorder videoFix missing video duration and poor seeking performance\nAPIs‚Äã\nThe following APIs are available:\nconvertMedia()Converts a video using WebCodecs and Media ParsergetAvailableContainers()Get a list of containers @remotion/webcodecs supports.canReencodeVideoTrack()Determine if a video track can be re-encodedcanReencodeAudioTrack()Determine if a audio track can be re-encodedcanCopyVideoTrack()Determine if a video track can be copied without re-encodingcanCopyAudioTrack()Determine if a audio track can be copied without re-encodinggetDefaultAudioCodec()Gets the default audio codec for a container if no other audio codec is specified.getDefaultVideoCodec()Gets the default video codec for a container if no other audio codec is specified.defaultOnAudioTrackHandler()The default track transformation function for audio tracks.defaultOnVideoTrackHandler()The default track transformation function for video tracks.getAvailableAudioCodecs()Get the audio codecs that can fit in a container.getAvailableVideoCodecs()Get the video codecs that can fit in a container.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousForeign file typesNextConvert a videoWhat can you to with this package?üíº License Disclaimerüöß Unstable API WarningInstallationGuideAPIs"
  },
  {
    "title": "List of resources",
    "markdown": "List of resourcesOn this pageList of resourcesThis list tries to compile all templates, libraries, building blocks and examples in one place. Add more to the list by clicking the \"Improve this page\" button below!\nTemplates‚Äã\n\nHello World (TypeScript) (Source code, Preview)\nHello World (JavaScript) (Source code, Preview)\nBlank (Source code, Preview)\nReact Three Fiber (Source code, Preview)\nStills (Source code, Preview)\nText-to-Speech Template (Azure) (Source code)\nText-to-Speech Template (Google) (Source code)\nAudiogram (Source code)\nSkia (Source code)\nHello World Template with pull request video previews\nLibrary starter template with best practices\nVideo Editor \u0026 Timeline Component (Next.js, Tailwind CSS) (Source Code, Preview)\nFree Remotion Animations \u0026 Effects (Source Code, Preview)\n\nSaaS starter Kits‚Äã\n\nRemix template\nNext.js template\n\nIntegrations‚Äã\n\nReact Three Fiber\nSkia\nGoogle Fonts\nFigma\nLottie\nspline.design\nAfter Effects\nRive\nGIFs\n\nEffects‚Äã\n\nMotion Blur\nNoise\nPath animations\n\nPlayers‚Äã\n\nRemotion Player\nVidstack Player\n\nAnimation helpers‚Äã\n\nRemotion Animated\nremotion-transition-series\nremotion-time - use seconds as a time unit instead of frame\nSpring Editor\nremotion-animate-text\nremotion-subtitle - Captioning helpers and styles\n\nFull projects‚Äã\n\nGitHub Unwrapped 2023 + 2024\nGitHub Unwrapped 2022\nGitHub Unwrapped 2021\nPodcast Maker\nStargazer\nMapSnap (exclusive for Company License subscribers)\nMockoops\nProduct Hunt Today\nRemotion Weather\nRewind Table (Airtable templates for Remotion)\nConference Speaker Announcement Cards\nMotionly.video\nDataVids\nBar race chart\n\nExamples‚Äã\n\nMusic with Tone.JS (Source code, Preview)\nAnimate .glb models (Source code, Preview)\nTypewriter effect (Source code, Preview)\nD3.js example (Source code, Preview)\nGreenscreen Effect (Docs)\nNoise visualization (Docs)\nAudio visualization (Docs)\n3D Text (Source code, Preview)\nWavy TikTok Effect (Source code)\nApple \"Spring loaded\" animation (Source code)\nThree.js particles animation (Source code, Preview)\nText morphing (Source code, Preview)\nText warping (Source code, Preview)\nAnimate GLTF models (Source code, Preview)\nOpenGL transitions (Source code, Preview)\nConference talk in React (Source code)\nConference talk in React #2 (Source code)\nTwitch stinger example (Source code)\nDevContainer Template (Source code)\nAnime.js example (Source code, Preview)\nMapbox example (Source code)\nShader example (Source code)\nJump cuts without re-mounting (Source code, Preview)\nCSS animations (Source code, Preview)\nGlobe.gl example (Source code)\nMeasuring the size of a DOM node (Source code, Preview)\nLight-leak Transition (Source code, Preview)\n12+ Remotion Examples (Preview)\nPool game with Matter.js (Source code and Preview)\n\nVideos‚Äã\nSee the Showcase for videos made with Remotion.\nTutorials‚Äã\n\nSpotify Wrapped\nProgrammatic Stories\nBasketball Tracker\nFormula 1 Graphics\nRemotion Skia Tutorial\nFireship: Remotion Tutorial\nCRT effect\n\"Create videos with Code\" by Prismic\nIntegrate GreenSock with Remotion\nDVD Screensaver Tutorial\nRemotion Tutorial by Alfonso Graziano\nTiming animations\n\"Create a video from a podcast with Remotion and AI\"\nFootball Graphics\n\nBlog posts‚Äã\n\nIntegrating Anime.js with Remotion\n\nTooling‚Äã\n\nVS Code extension\nGIF Pull request previews\nLoading compositions remotely\n\nHacks‚Äã\n\nGitHub Actions Matrix renderer\nWebKit renderer\nRustymotion - Rust renderer\nSide-by-side editor\n\nHumans‚Äã\n\nExperts\nSupport\nSuccess Stories\n\nProducts‚Äã\n\nTypeframes\nClipPulse\nAugie\nHackreels\nAnimStats\nContent Studio AI\n\nSee also‚Äã\n\nRemotion GitHub topic\n#resources and #showcase channel on Discord\n\nMany resources in our documentation were left out from this list to avoid too much redundancy.\nSearch the documentation to see if we have an article on what you are looking for!Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousCompositionNextReact 19TemplatesSaaS starter KitsIntegrationsEffectsPlayersAnimation helpersFull projectsExamplesVideosTutorialsBlog postsToolingHacksHumansProductsSee also"
  },
  {
    "title": "The fundamentals",
    "markdown": "Getting startedThe fundamentalsOn this pageThe fundamentalsReact components‚Äã\n\nThe idea of Remotion is to give you a frame number and a blank canvas, to which you can render anything you want using React. This is an example React component that renders the current frame as text:\nMyComposition.tsxtsximport { AbsoluteFill, useCurrentFrame } from \"remotion\";¬†export const MyComposition = () =\u003e {  const frame = useCurrentFrame();¬†  return (    \u003cAbsoluteFill      style={{        justifyContent: \"center\",        alignItems: \"center\",        fontSize: 100,        backgroundColor: \"white\",      }}    \u003e      The current frame is {frame}.    \u003c/AbsoluteFill\u003e  );};\nMyComposition.tsxtsximport { AbsoluteFill, useCurrentFrame } from \"remotion\";¬†export const MyComposition = () =\u003e {  const frame = useCurrentFrame();¬†  return (    \u003cAbsoluteFill      style={{        justifyContent: \"center\",        alignItems: \"center\",        fontSize: 100,        backgroundColor: \"white\",      }}    \u003e      The current frame is {frame}.    \u003c/AbsoluteFill\u003e  );};\nA video is a function of images over time. If you change content every frame, you'll end up with an animation.\nVideo properties‚Äã\nA video has 4 properties:\n\nwidth in pixels.\nheight in pixels.\ndurationInFrames: the number of frames which the video is long.\nfps: framerate of the video.\n\nYou can obtain these values from the useVideoConfig() hook:\ntsximport {AbsoluteFill, useVideoConfig} from 'remotion';¬†export const MyComposition = () =\u003e {  const {fps, durationInFrames, width, height} = useVideoConfig();¬†  return (    \u003cAbsoluteFill      style={{        justifyContent: 'center',        alignItems: 'center',        fontSize: 60,        backgroundColor: 'white',      }}    \u003e      This {width}x{height}px video is {durationInFrames / fps} seconds long.    \u003c/AbsoluteFill\u003e  );};\ntsximport {AbsoluteFill, useVideoConfig} from 'remotion';¬†export const MyComposition = () =\u003e {  const {fps, durationInFrames, width, height} = useVideoConfig();¬†  return (    \u003cAbsoluteFill      style={{        justifyContent: 'center',        alignItems: 'center',        fontSize: 60,        backgroundColor: 'white',      }}    \u003e      This {width}x{height}px video is {durationInFrames / fps} seconds long.    \u003c/AbsoluteFill\u003e  );};\nnoteA video's first frame is 0 and its last frame is durationInFrames - 1.\nCompositions‚Äã\nA composition is the combination of a React component and video metadata.\nBy rendering a \u003cComposition\u003e component in src/Root.tsx, you can register a renderable video and make it visible in the Remotion sidebar.\nsrc/Root.tsxtsxexport const RemotionRoot: React.FC = () =\u003e {  return (    \u003cComposition      id=\"MyComposition\"      durationInFrames={150}      fps={30}      width={1920}      height={1080}      component={MyComposition}    /\u003e  );};\nsrc/Root.tsxtsxexport const RemotionRoot: React.FC = () =\u003e {  return (    \u003cComposition      id=\"MyComposition\"      durationInFrames={150}      fps={30}      width={1920}      height={1080}      component={MyComposition}    /\u003e  );};\nnoteYou can register multiple compositions in src/Root.tsx by wrapping them in a React Fragment:\n\u003c\u003e\u003cComposition/\u003e\u003cComposition/\u003e\u003c/\u003e. See also: How to combine compositions?Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousInstallationNextAnimating propertiesReact componentsVideo propertiesCompositions"
  },
  {
    "title": "Support Policy",
    "markdown": "Get helpSupport PolicyOn this pageSupport PolicyThe Remotion team provides no guarantee for support, and you should not hold the expectation to receive any help.\nHowever, we welcome you to ask questions and invest a lot of time into answering them.\nFollow the steps below if have a question that you would like to get answered.\nHow to ask for help‚Äã\nSee here for channels where you can ask for help as well as for best practices for asking questions.\nPrioritized support‚Äã\nCompany license customers can get a  Company License badge on Discord for each Developer Seat they subscribe to. The badge can be activated on remotion.pro.\nIf posted in a public channel, the Remotion team will try to prioritize your question, albeit no guarantee of support is given.\nWe still expect company license subscribers to follow the best practices for asking questions outlined above.\nPaid consulting‚Äã\nOur Remotion Experts are available for technical advice and guidance. With their extensive experience in creating Remotion projects, they will surely be of great help.\nYou can also request a consultation session with Remotion's creator here.\nThis is the only way to receive support via video call fom the Remotion team.\nWhen we can't help‚Äã\nWe don't provide support if:\n\nthe guidelines above were not followed\nlow effort was put into first solving the problem yourself\nyour question is lacking reproduction or information\nthe cause of problems is due to poor React or JavaScript skills\nour Code of Conduct is violated\n\nRemotion is targeted towards developers and therefore basic skills in React and web development are expected.\nYou should also be mindful of the limitations of those technologies as we cannot help you overcome them.\nSee also‚Äã\n\nGet help\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousGet helpNextSecurityHow to ask for helpPrioritized supportPaid consultingWhen we can't helpSee also"
  },
  {
    "title": "React 19",
    "markdown": "Migration guidesReact 19On this pageReact 19Updating packages‚Äã\nTo use React 19's newest features, you need at least version 4.0.0 of Remotion.\nYou need to upgrade both react and react-dom:\ndiff- \"react\": \"18.3.1\"- \"react-dom\": \"18.3.1\"+ \"react\": \"19.0.0\"+ \"react-dom\": \"19.0.0\"\ndiff- \"react\": \"18.3.1\"- \"react-dom\": \"18.3.1\"+ \"react\": \"19.0.0\"+ \"react-dom\": \"19.0.0\"\nIf you use TypeScript, update to the newest types as well:\ndiff- \"@types/react\": \"18.3.1\"- \"@types/react-dom\": \"18.3.1\"+ \"@types/react\": \"19.0.0\"+ \"@types/react-dom\": \"19.0.0\"\ndiff- \"@types/react\": \"18.3.1\"- \"@types/react-dom\": \"18.3.1\"+ \"@types/react\": \"19.0.0\"+ \"@types/react-dom\": \"19.0.0\"\nRun npm i, bun i, yarn or pnpm i afterwards, matching your package manager.\nUpdated templates‚Äã\nWe have updated all templates to use React 19 (exception: React Native Skia).\nSee the source code of the templates for examples on how to upgrade it to React 19.\nHTMLRefElement Type Change‚Äã\nIf you have type errors related to React Refs, upgrade to v4.0.236 of Remotion, where we aligned the types with React 19.\nEcosystem support‚Äã\nSome libraries that are used with Remotion need upgrading.\nReact Three Fiber‚Äã\nUpdate to 9.0.0-rc.1 and three to 0.171.0.\nstyled-components‚Äã\nUpdate to v6.\nNext.js‚Äã\nUpdate to Next.js 15.\nReact Native Skia‚Äã\nNo React 19 support yet. Stay on React 18.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousList of resourcesNextv5.0 MigrationUpdating packagesUpdated templatesHTMLRefElement Type ChangeEcosystem supportReact Three Fiberstyled-componentsNext.jsReact Native Skia"
  },
  {
    "title": "@remotion/player",
    "markdown": "PlayerOn this page@remotion/playerUsing the Remotion Player you can embed Remotion videos in any React app and customize the video content at runtime.\nTemplates‚Äã\nThe following templates include the Player and Lambda rendering and are a good starting point for building a video app:\n\nNext.js (App dir)\nNext.js (App dir + TailwindCSS)\nNext.js (Pages dir)\nRemix\n\nAPI‚Äã\n\u003cPlayer\u003eEmbed a Remotion composition in a web app\u003cThumbnail\u003eEmbed a still in a web app\nGuide‚Äã\nInstallationInstall the Player into your projectExamplesCode samples for various scenariosSizingSetting the size of the PlayerAutoplayDealing with browser autoplay policiesDisplay timeWrite a custom component for displaying the current timePreloading assetsMake assets ready to play when they appear in the videoBest practicesChecklist of correct implementationBuffer statePause the Player while assets are loadingAvoiding flickersTroubleshooting for flickers due to unloaded assetsPremountingMount components earlier to allow them to loadDrag \u0026 DropAllow interactivity on the canvasCustom controlsRecipes for custom Play buttons, volume sliders, etc.Media KeysControl what happens when users presses ‚èØÔ∏è\nDemo‚Äã\nPlay the video, then tweak the parameters below the video.\nHi there!Your favorite color is0:00 / 0:11Enter your name: Select your favorite color: \nSee also‚Äã\n\nInstallation\nAPI\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousComparison of SSR optionsNextExamplesTemplatesAPIGuideDemoSee also"
  },
  {
    "title": "Installing Remotion in an existing project",
    "markdown": "Building appsInstallation in existing projectOn this pageInstalling Remotion in an existing projectRemotion can be installed into existing projects, such as Next.JS, Remix, Vite or Create React App, as well as server-only projects that run on Node.JS. Get started by adding the following packages:\nnpmyarnpnpmbunnpm i --save-exact remotion@4.0.241 @remotion/cli@4.0.241Copynpm i --save-exact remotion@4.0.241 @remotion/cli@4.0.241Copypnpm i remotion@4.0.241 @remotion/cli@4.0.241Copypnpm i remotion@4.0.241 @remotion/cli@4.0.241Copybun i remotion@4.0.241 @remotion/cli@4.0.241Copybun i remotion@4.0.241 @remotion/cli@4.0.241Copyyarn --exact add remotion@4.0.241 @remotion/cli@4.0.241Copyyarn --exact add remotion@4.0.241 @remotion/cli@4.0.241CopyThis assumes you are currently using v4.0.241 of Remotion.Also update remotion and all `@remotion/*` packages to the same version.Remove all ^ character in front of the version numbers of it as it can lead to a version conflict.\n\nIf you'd like to embed a Remotion video in your existing React app, install @remotion/player as well.\nIf you'd like to render a video using the Node.JS APIs, install @remotion/renderer as well.\nIf you'd like to trigger a render on Remotion Lambda, install @remotion/lambda as well.\n\nSetting up the folder structure‚Äã\nCreate a new folder for the Remotion files. It can be anywhere and assume any name, in this example we name it remotion and put it in the root of our project. Inside the folder you created, create 3 files:\nremotion/Composition.tsxtsxexport const MyComposition = () =\u003e {  return null;};\nremotion/Composition.tsxtsxexport const MyComposition = () =\u003e {  return null;};\nremotion/Root.tsxtsximport React from 'react';import {Composition} from 'remotion';import {MyComposition} from './Composition';¬†export const RemotionRoot: React.FC = () =\u003e {  return (    \u003c\u003e      \u003cComposition        id=\"Empty\"        component={MyComposition}        durationInFrames={60}        fps={30}        width={1280}        height={720}      /\u003e    \u003c/\u003e  );};\nremotion/Root.tsxtsximport React from 'react';import {Composition} from 'remotion';import {MyComposition} from './Composition';¬†export const RemotionRoot: React.FC = () =\u003e {  return (    \u003c\u003e      \u003cComposition        id=\"Empty\"        component={MyComposition}        durationInFrames={60}        fps={30}        width={1280}        height={720}      /\u003e    \u003c/\u003e  );};\nremotion/index.tstsimport { registerRoot } from \"remotion\";import { RemotionRoot } from \"./Root\";¬†registerRoot(RemotionRoot);\nremotion/index.tstsimport { registerRoot } from \"remotion\";import { RemotionRoot } from \"./Root\";¬†registerRoot(RemotionRoot);\nThe file that calls registerRoot() is now your Remotion entry point.\nnoteWatch out for import aliases in your tsconfig.json that will resolve import {...} from \"remotion\" to the remotion folder. We recommend to not use paths without a prefix.\nStarting the Studio‚Äã\nStart the Remotion Studio using the following command:\nnpx remotion studio remotion/index.ts\nnpx remotion studio remotion/index.ts\nReplace remotion/index.ts with your entrypoint if necessary.\nRender a video‚Äã\nRender our a video using\nnpx remotion render remotion/index.ts MyComp out.mp4\nnpx remotion render remotion/index.ts MyComp out.mp4\nReplace the entrypoint, composition name and output filename with the values that correspond to your usecase.\nInstall the ESLint Plugin‚Äã\nRemotion has an ESLint plugin that warns about improper usage of Remotion APIs. To add it to your existing project, install it:\nnpmyarnpnpmbashnpm i @remotion/eslint-plugin\nbashnpm i @remotion/eslint-pluginbashyarn add @remotion/eslint-plugin\nbashyarn add @remotion/eslint-pluginbashpnpm i @remotion/eslint-plugin\nbashpnpm i @remotion/eslint-plugin\nThis snippet will enable the recommended rules only for the Remotion files:\n.eslintrcjson{  \"plugins\": [\"@remotion\"],  \"overrides\": [    {      \"files\": [\"remotion/*.{ts,tsx}\"],      \"extends\": [\"plugin:@remotion/recommended\"]    }  ]}\n.eslintrcjson{  \"plugins\": [\"@remotion\"],  \"overrides\": [    {      \"files\": [\"remotion/*.{ts,tsx}\"],      \"extends\": [\"plugin:@remotion/recommended\"]    }  ]}\nEmbed a Remotion video into your React app‚Äã\nYou can use the \u003cPlayer\u003e component to display a Remotion video in your React project. Read the separate page about it for instructions.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousTelemetry in @remotion/webcodecsNextConvert Studio to an appSetting up the folder structureStarting the StudioRender a videoInstall the ESLint PluginEmbed a Remotion video into your React app"
  },
  {
    "title": "Embedding videos into Remotion",
    "markdown": "Embedding videosAdding a videoOn this pageEmbedding videos into RemotionYou can embed existing videos into Remotion by using the \u003cOffthreadVideo\u003e component.\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return (    \u003cOffthreadVideo src=\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" /\u003e  );};\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return (    \u003cOffthreadVideo src=\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" /\u003e  );};\nUsing a local file‚Äã\nPut a file into the public folder and reference it using staticFile().\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} /\u003e;};\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} /\u003e;};\nTrimming‚Äã\nBy using the startFrom prop, you can remove the first few seconds of the video.\nIn the example below, the first two seconds of the video are skipped (assuming a composition FPS of 30).\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} startFrom={60} /\u003e;};\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} startFrom={60} /\u003e;};\nSimilarly, you can use endAt to trim the end of the video.\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return (    \u003cOffthreadVideo src={staticFile('video.mp4')} startFrom={60} endAt={120} /\u003e  );};\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return (    \u003cOffthreadVideo src={staticFile('video.mp4')} startFrom={60} endAt={120} /\u003e  );};\nDelaying‚Äã\nUse the \u003cSequence\u003e component to delay the appearance of a video.\nIn the example below, the video will start playing at frame 60.\ntsximport React from 'react';import {OffthreadVideo, staticFile, Sequence} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return (    \u003cSequence from={60}\u003e      \u003cOffthreadVideo src={staticFile('video.mp4')} /\u003e    \u003c/Sequence\u003e  );};\ntsximport React from 'react';import {OffthreadVideo, staticFile, Sequence} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return (    \u003cSequence from={60}\u003e      \u003cOffthreadVideo src={staticFile('video.mp4')} /\u003e    \u003c/Sequence\u003e  );};\nSize and Position‚Äã\nYou can size and position the video using CSS.\nYou'll find the properties width, height, position, left, top, right, bottom, margin, aspectRatio and objectFit useful.\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return (    \u003cOffthreadVideo      src={staticFile('video.mp4')}      style={{        width: 640,        height: 360,        position: 'absolute',        top: 100,        left: 100,      }}    /\u003e  );};\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return (    \u003cOffthreadVideo      src={staticFile('video.mp4')}      style={{        width: 640,        height: 360,        position: 'absolute',        top: 100,        left: 100,      }}    /\u003e  );};\nVolume‚Äã\nYou can set the volume of the video using the volume prop.\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} volume={0.5} /\u003e;};\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} volume={0.5} /\u003e;};\nYou can also mute a video using the muted prop.\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} muted /\u003e;};\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} muted /\u003e;};\nSee Using Audio for more ways you can control volume.\nSpeed‚Äã\nYou can use the playbackRate prop to change the speed of the video.\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} playbackRate={2} /\u003e;};\ntsximport React from 'react';import {OffthreadVideo, staticFile} from 'remotion';¬†export const MyComp: React.FC = () =\u003e {  return \u003cOffthreadVideo src={staticFile('video.mp4')} playbackRate={2} /\u003e;};\nThis only works if the speed is constant. See also: Changing the speed of a video over time.\nLooping‚Äã\nSee: Looping an \u003cOffthreadVideo\u003e\nGIFs‚Äã\nSee: Using GIFs\nSee also‚Äã\n\n\u003cOffthreadVideo\u003e\nUsing Audio\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousAnimation mathNextMake timeline duration the sameUsing a local fileTrimmingDelayingSize and PositionVolumeSpeedLoopingGIFsSee also"
  },
  {
    "title": "Upgrading Remotion",
    "markdown": "Upgrading RemotionOn this pageUpgrading RemotionThe easiest way to do this is to run the following command in the root of your project:\nnpxpnpmyarnbunxbashnpx remotion upgrade\nbashnpx remotion upgradebashpnpm exec remotion upgrade\nbashpnpm exec remotion upgradebashyarn remotion upgrade\nbashyarn remotion upgradebashbunx remotion upgrade\nbashbunx remotion upgrade\nnoteYou need the @remotion/cli package installed for this.\nManually upgrading Remotion‚Äã\nTo upgrade Remotion to the latest version, all @remotion/* packages and remotion must be updated to the same version.\nEdit the version number in your package.json for all packages.\nDelete the ^ in front of the version number in your package.json in order to force the exact version you specified.\nBreaking changes‚Äã\nRemotion follows semantic versioning.\nThis means if the first number of the version is the same, you can upgrade and your code is backwards-compatible.\nExample: If you are on 4.0.0, you can upgrade to 4.1.100 without changing your code.\nHowever, to upgrade to 5.0, you will need to follow the migration guide.\nExceptions to the breaking change rule are APIs that are marked as experimental.\nChangelog‚Äã\nVisit remotion.dev/changelog to see a list of all changes.\nStable versions‚Äã\nWe maintain a repo with the latest stable version of Remotion for customers who need a higher level of stability.\nCustomers may get access to the repo on the remotion.pro portal.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousCombining compositionsNextTerminologyManually upgrading RemotionBreaking changesChangelogStable versions"
  },
  {
    "title": "Animating properties",
    "markdown": "Getting startedAnimating propertiesOn this pageAnimating propertiesAnimation works by changing properties over time.\nLet's create a simple fade in animation.\nIf we want to fade the text in over 60 frames, we need to gradually change the opacity over time so that it goes from 0 to 1.\nFadeIn.tsxtsxexport const FadeIn = () =\u003e {  const frame = useCurrentFrame();¬†  const opacity = Math.min(1, frame / 60);¬†  return (    \u003cAbsoluteFill      style={{        justifyContent: \"center\",        alignItems: \"center\",        backgroundColor: \"white\",        fontSize: 80,      }}    \u003e      \u003cdiv style={{ opacity: opacity }}\u003eHello World!\u003c/div\u003e    \u003c/AbsoluteFill\u003e  );};\nFadeIn.tsxtsxexport const FadeIn = () =\u003e {  const frame = useCurrentFrame();¬†  const opacity = Math.min(1, frame / 60);¬†  return (    \u003cAbsoluteFill      style={{        justifyContent: \"center\",        alignItems: \"center\",        backgroundColor: \"white\",        fontSize: 80,      }}    \u003e      \u003cdiv style={{ opacity: opacity }}\u003eHello World!\u003c/div\u003e    \u003c/AbsoluteFill\u003e  );};\n\nUsing the interpolate helper function‚Äã\nUsing the interpolate() function can make animations more readable. The above animation can also be written as:\ntsximport { interpolate } from \"remotion\";¬†const opacity = interpolate(frame, [0, 60], [0, 1], {  /*                        ^^^^^   ^^^^^    ^^^^  Variable to interpolate ----|       |       |  Input range ------------------------|       |  Output range -------------------------------|  */  extrapolateRight: \"clamp\",});\ntsximport { interpolate } from \"remotion\";¬†const opacity = interpolate(frame, [0, 60], [0, 1], {  /*                        ^^^^^   ^^^^^    ^^^^  Variable to interpolate ----|       |       |  Input range ------------------------|       |  Output range -------------------------------|  */  extrapolateRight: \"clamp\",});\nIn this example, we map the frames 0 to 60 to their opacity values (0, 0.0166, 0.033, 0.05 ...) and use the extrapolateRight setting to clamp the output so that it never becomes bigger than 1.\nUsing spring animations‚Äã\nSpring animations are a natural animation primitive. By default, they animate from 0 to 1 over time. This time, let's animate the scale of the text.\ntsximport { spring, useCurrentFrame, useVideoConfig } from \"remotion\";¬†export const MyVideo = () =\u003e {  const frame = useCurrentFrame();  const { fps } = useVideoConfig();¬†  const scale = spring({    fps,    frame,  });¬†  return (    \u003cdiv      style={{        flex: 1,        textAlign: \"center\",        fontSize: \"7em\",      }}    \u003e      \u003cdiv style={{ transform: `scale(${scale})` }}\u003eHello World!\u003c/div\u003e    \u003c/div\u003e  );};\ntsximport { spring, useCurrentFrame, useVideoConfig } from \"remotion\";¬†export const MyVideo = () =\u003e {  const frame = useCurrentFrame();  const { fps } = useVideoConfig();¬†  const scale = spring({    fps,    frame,  });¬†  return (    \u003cdiv      style={{        flex: 1,        textAlign: \"center\",        fontSize: \"7em\",      }}    \u003e      \u003cdiv style={{ transform: `scale(${scale})` }}\u003eHello World!\u003c/div\u003e    \u003c/div\u003e  );};\nYou should see the text jump in.\n\n\nThe default spring configuration leads to a little bit of overshoot, meaning the text will bounce a little bit. See the documentation page for spring() to learn how to customize it.\nAlways animate using useCurrentFrame()‚Äã\nWatch out for flickering issues during rendering that arise if you write animations that are not driven by useCurrentFrame() ‚Äì for example CSS transitions.\nRead more about how Remotion's rendering works - understanding it will help you avoid issues down the road.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousThe fundamentalsNextReuse componentsUsing the interpolate helper functionUsing spring animationsAlways animate using useCurrentFrame()"
  },
  {
    "title": "API overview",
    "markdown": "API overviewAPI overviewCommand lineReference for the npx remotion commandsConfiguration fileReference for the remotion.config.ts fileremotionCore APIs: useCurrentFrame(), interpolate(), etc.\u003cComposition\u003eDefine a video\u003cStill\u003eDefine a still\u003cFolder\u003eOrganize compositions in the Studio sidebarregisterRoot()Initialize a Remotion projectuseCurrentFrame()Obtain the current timeuseVideoConfig()Get the duration, dimensions and FPS of a compositioninterpolate()Map a range of values to anotherspring()Physics-based animation primitiveinterpolateColors()Map a range of values to colorsmeasureSpring()Determine the duration of a springEasingCustomize animation curve of interpolate()\u003cImg\u003eRender an \u003cimg\u003e tag and wait for it to load\u003cVideo\u003eSynchronize a \u003cvideo\u003e with Remotion's time\u003cAudio\u003eSynchronize \u003caudio\u003e with Remotion's time\u003cOffthreadVideo\u003eAlternative to \u003cVideo\u003e\u003cIFrame\u003eRender an \u003ciframe\u003e tag and wait for it to load\u003cSequence\u003eTime-shifts it's children\u003cSeries\u003eDisplay contents after another\u003cFreeze\u003eFreeze some content in time\u003cLoop\u003ePlay some content repeatedlydelayRender()Block a render from continuingcontinueRender()Unblock a rendercancelRender()Abort an error getInputProps()Receive the user-defined input datagetRemotionEnvironment()Determine if you are currently previewing or renderingstaticFile()Access file from public/ folder\u003cAbsoluteFill\u003ePosition content absolutely and in full sizeVERSIONGet the current version of Remotion@remotion/bundlerCreate a Webpack bundle from Node.JS bundle()Create a Webpack bundle@remotion/playerPlay a Remotion video in the browser.\u003cPlayer\u003eEmbed a Remotion composition in a web app\u003cThumbnail\u003eEmbed a still in a web app@remotion/lambdaRender videos and stills on AWS LambdaestimatePrice()Estimate the price of a renderdeployFunction()Create a new function in AWS LambdadeleteFunction()Delete a function in AWS LambdagetFunctionInfo()Gets information about a functiongetFunctions()Lists available Remotion Lambda functionsgetCompositionsOnLambda()Gets list of compositions inside a Lambda functiondeleteSite()Delete a bundle from S3deploySite()Bundle and upload a site to S3getAwsClient()Access the AWS SDK directlygetRegions()Get all available regionsgetSites()Get all available sitesdownloadMedia()Download a render artifact from S3getUserPolicy()Get the policy JSON for your AWS usergetRolePolicy()Get the policy JSON for your AWS rolegetOrCreateBucket()Ensure a Remotion S3 bucket existsgetRenderProgress()Query the progress of a renderpresignUrl()Make a private file public to those with the linkrenderMediaOnLambda()Trigger a video or audio renderrenderStillOnLambda()Trigger a still rendersimulatePermissions()Ensure permissions are correctly set upspeculateFunctionName()Get the lambda function name based on its configurationvalidateWebhookSignature()Validate an incoming webhook request is authentic@remotion/cloudrunRender videos and stills on GCP Cloud RungetServiceInfo()Gets information about a servicedeployService()Create a new service in GCP Cloud RundeleteService()Delete a service in GCP Cloud RungetServices()Lists available Remotion Cloud Run servicesspeculateServiceName()Speculate a service name based on its configurationgetRegions()Get all available regionsdeploySite()Bundle and upload a site to Cloud StoragedeleteSite()Delete a bundle from Cloud StoragegetSites()Get all available sites from Cloud StoragegetOrCreateBucket()Ensure a Remotion Cloud Storage bucket existsrenderMediaOnCloudrun()Trigger a video or audio renderrenderStillOnCloudrun()Trigger a still rendertestPermissions()Ensure permissions are correctly set up in GCP@remotion/captionsCommon operations for subtitles.CaptionAn object shape for captionsparseSrt()Parse a .srt file into a Caption arrayserializeSrt()Serialize a .srt file into a Caption arraycreateTikTokStyleCaptions()Structure the captions for TikTok-style display@remotion/gifInclude a GIF in your video.\u003cGif\u003eRender a GIFgetGifDurationInSeconds()Get the runtime of a GIFpreloadGif()Prepare a GIF for displaying in the Player@remotion/media-utilsObtain info about video and audio.audioBufferToDataUrl()Serialize an audio buffergetAudioData()Get metadata of an audio sourcegetAudioDurationInSeconds()Get the duration of an audio sourcegetVideoMetadata()Get metadata of a video sourcegetWaveformPortion()Trims audio data into a waveformuseAudioData()getAudioData() as a hookuseWindowedAudioData()Optimized for fetching only current data, works only with .wavvisualizeAudio()Processes a waveform for visualization@remotion/animation-utilsObtain info about video and audio.makeTransform()Create a value for the CSS transform propertyinterpolateStyles()Map a range of values to CSS style values@remotion/tailwindWebpack override for using TailwindCSSenableTailwind()Override the Webpack config to enable TailwindCSS@remotion/enable-scssWebpack override for enabling SASS/SCSSenableScss()Override the Webpack config to enable SCSS@remotion/threeCreate 3D videos using React Three Fiber\u003cThreeCanvas\u003eA wrapper for React Three Fiber' CanvasuseVideoTexture(Use a video in React Three Fiber useOffthreadVideoTexture()Use an \u003cOffthreadVideo\u003e in React Three Fiber @remotion/skiaLow-level graphics using React Native SkiaenableSkia()Webpack override for enabling Skia\u003cSkiaCanvas\u003eReact Native Skia \u003cCanvas\u003e wrapper@remotion/lottieInclude a Lottie animation in your video\u003cLottie\u003eEmbed a Lottie animation in RemotiongetLottieMetadata()Get metadata of a Lottie animationstaticFile()Load Lottie animations from a static file@remotion/preloadPreload media for the PlayerpreloadVideo()Preload a video sourcepreloadAudio()Preload an audio sourcepreloadFont()Preload a fontpreloadImage()Preload an imageresolveRedirect()Get the definitive URL after all redirects@remotion/rendererRender video, audio and stills from Node.JS or BungetCompositions()List available compositionsselectComposition()Get a compositionrenderMedia()Render a video or audiorenderFrames()Render a series of imagesrenderStill()Render a single imagestitchFramesToVideo()Turn images into a videoopenBrowser()Open a Chrome browser to reuse across rendersensureBrowser()Open a Chrome browser to reuse across rendersmakeCancelSignal()Create token to later cancel a rendergetVideoMetadata()Get metadata from a video file in Node.jsgetSilentParts()Obtain silent portions of a video or audioensureFfmpeg()Check for ffmpeg binary and install if not existingensureFfprobe()Check for ffprobe binary and install if not existinggetCanExtractFramesFast()Probes for fast extraction for \u003cOffthreadVideo\u003e@remotion/pathsManipulate and obtain info about SVG pathsgetLength()Obtain length of an SVG pathgetPointAtLength()Get coordinates at a certain point of an SVG pathgetTangentAtLength()Gets tangents x and y of a point which is on an SVG pathreversePath()Switch direction of an SVG pathnormalizePath()Replace relative with absolute coordinatesinterpolatePath()Interpolates between two SVG pathsevolvePath()Animate an SVG pathtranslatePath()Translates the position of an path against X/Y coordinateswarpPath()Remap the coordinates of a pathscalePath()Grow or shrink the size of the pathgetBoundingBox()Get the bounding box of a SVG pathresetPath()Translates an SVG path to (0, 0)extendViewBox()Widen an SVG viewBox in all directionsgetSubpaths()Split SVG path into its partsparsePath()Parse a string into an array of instructionsserializeInstructions()Turn an array of instructions into a SVG path reduceInstructions()Reduce the amount of instruction types @remotion/noiseGenerate noise effectsnoise2D()Create 2D noisenoise3D()Create 3D noisenoise4D()Create 4D noise@remotion/shapesGenerate SVG shapesmakeRect()Generate SVG Path for a rect\u003cRect/\u003eRender a rectmakeCircle()Generate SVG Path for a circle\u003cCircle/\u003eRender a circlemakePie()Generate SVG Path for a pie\u003cPie/\u003eRender a piemakeEllipse()Generate SVG Path for a ellipse\u003cEllipse/\u003eRender a ellipsemakeTriangle()Generate SVG Path for a triangle\u003cTriangle/\u003eRender a trianglemakeStar()Generate SVG Path for a star\u003cStar/\u003eRender a starmakePolygon()Generate SVG Path for a polygon\u003cPolygon/\u003eRender a polygon@remotion/studioAPIs for controlling theRemotion StudiogetStaticFiles()Get a list of files in the public folderwatchPublicFolder()Listen to changes in the public folderwatchStaticFile()Listen to changes of a static filewriteStaticFile()Save content to a file in the public directorysaveDefaultProps()Save default props to the root fileupdateDefaultProps()Update default props in the Props editordeleteStaticFile()Delete a file from the public directoryrestartStudio()Restart the Studio Server.focusDefaultPropsPath()Scrolls to a specific field in the default props editorreevaluateComposition()Re-runs calculateMetadata() on the current composition@remotion/transitionsTransition between scenesComponents\u003cTransitionSeries\u003eA \u003cSeries\u003e with transitions inbetweenTimingsspringTiming()Transition with a spring()linearTiming()Transition linearly with optional EasingPresentationsHover over an effect to see the preview.ABfade()Animate the opacity of the scenesABslide()Slide in and push out the previous sceneABwipe()Slide over the previous sceneABflip()Rotate the previous sceneABclockWipe()Reveal the new scene in a circular movementABcube()PaidRotate both scenes with 3D perspectiveABnone()Have no visual effect.@remotion/layout-utilsLayout helpersmeasureText()Get dimensions of textfillTextBox()Find line breaks and overflows in a text boxfitText()Get font size to fit text in a box@remotion/install-whisper-cppWhisper.cpp installation and transcriptioninstallWhisperCpp()Install the whisper.cpp softwaredownloadWhisperModel()Download a Whisper modeltranscribe()Transcribe an audio fileconvertToCaptions()Postprocessing for TikTok-style captions@remotion/openai-whisperWork with transcriptions from OpenAI WhisperopenAiWhisperApiToCaptions()Turn OpenAI Whisper API transcriptions into an array of Caption@remotion/animated-emojiGoogle Fonts Animated Emojis as Remotion Components\u003cAnimatedEmoji\u003eComponent for rendering an animated emoji.getAvailableEmoji()Get a list of available emoji.@remotion/google-fontsLoad Google Fonts onto a page.loadFont()Load a Google FontgetAvailableFonts()Static list of available fontsgetInfo()Metadata about a specific font@remotion/riveEmbed Rive animations in Remotion\u003cRemotionRiveCanvas\u003eRender a Rive animation@remotion/zod-typesZod types enabling Remotion Studio UIzColor()A Zod Type for colorszTextarea()A Zod Type for multiple-line text in a textarea@remotion/motion-blurApply motion blur effects to components\u003cTrail\u003eAdd a trail effect to children\u003cCameraMotionBlur\u003eAdd a natural camera motion blur effect to children@remotion/fontsLoad font files onto a page.loadFont()Load a font from a URL or a local file@remotion/media-parserA pure JavaScript library for parsing video filesparseMedia()Parse a media file.nodeReaderRead a file from the local file system.fetchReaderRead a file using fetch().webFileReaderRead a file from \u003cinput type=\"file\"\u003e.@remotion/webcodecsConverting media using WebCodecsconvertMedia()Converts a video using WebCodecs and Media ParsergetAvailableContainers()Get a list of containers @remotion/webcodecs supports.canReencodeVideoTrack()Determine if a video track can be re-encodedcanReencodeAudioTrack()Determine if a audio track can be re-encodedcanCopyVideoTrack()Determine if a video track can be copied without re-encodingcanCopyAudioTrack()Determine if a audio track can be copied without re-encodinggetDefaultAudioCodec()Gets the default audio codec for a container if no other audio codec is specified.getDefaultVideoCodec()Gets the default video codec for a container if no other audio codec is specified.defaultOnAudioTrackHandler()The default track transformation function for audio tracks.defaultOnVideoTrackHandler()The default track transformation function for video tracks.getAvailableAudioCodecs()Get the audio codecs that can fit in a container.getAvailableVideoCodecs()Get the video codecs that can fit in a container.@remotion/licensingReport and query company license usageregisterUsagePoint()Register a cloud render or WebCodecs conversiongetUsage()Query usage of company licenseImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024NextCLI reference"
  },
  {
    "title": "Acknowledgements",
    "markdown": "AcknowledgementsOn this pageAcknowledgementsRemotion would not be possible without the work of many others.\nSoftware acknowledgements‚Äã\nThis software uses code of FFmpeg licensed under the LGPLv2.1 and its source can be downloaded here.\nRemotion depends on many JavaScript packages. View the list of packages for each package that we distribute here.\nContributors‚Äã\nMore than 200 people have contributed to the Remotion codebase.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousLicense \u0026 PricingSoftware acknowledgementsContributors"
  },
  {
    "title": "Preview your video",
    "markdown": "Getting startedPreview your videoPreview your videoYou can preview your video by starting the Remotion Studio:\nRegular templatesNext.js and Remix templatesbashnpm run dev\nbashnpm run devbashnpm run remotion\nbashnpm run remotion\nThis is a shorthand for the studio command of the Remotion CLI:\nbashnpx remotion studio\nbashnpx remotion studio\nA server will be started on port 3000 (or a higher port if it isn't available) and the Remotion Studio should open in the browser.\n\nLearn more about the Remotion Studio.\nnoteIn older projects, npm start was used over npm run dev.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousReuse componentsNextTransforms"
  },
  {
    "title": "Render your video",
    "markdown": "RenderingOn this pageRender your videoThere are various ways to render your video.\nRemotion Studio‚Äã\nTo render a video, click the \" Render\" button.\nChoose your preferred settings, then confirm using the Render video button.\nRemotion Studio deployment‚Äã\nIt‚Äôs possible to deploy the Remotion Studio onto a long-running server in the cloud, which can then be accessed by your non-technical team members using just a URL. Check out the Deploy the Remotion Studio guide to learn how to do this.\nCLI‚Äã\nRender a video using render CLI command:\nbashnpx remotion render HelloWorld\nbashnpx remotion render HelloWorld\nModify the composition ID to select a different video to render, or add an output path at the end if you want to override the default.\nYou can leave out the composition name and a picker will be shown:\nbashnpx remotion render\nbashnpx remotion render\nSSR‚Äã\nRemotion has a full-featured server-side rendering API. Read more about it on the server-side rendering API.\nAWS Lambda‚Äã\nCheck out Remotion Lambda.\nGitHub Actions‚Äã\nYou can also render a video using a GitHub Action.\nGoogle Cloud Run‚Äã\nAn alpha version of Remotion for Cloud Run is available.\nWe plan to change it in the future so it shares a runtime with Remotion Lambda.\nVariants‚Äã\nAudio-only‚Äã\nInstead of rendering a video, you can also just export the audio.\nImage Sequence‚Äã\nInstead of encoding as a video, you can use the --sequence command to output a series of image.\nStill images‚Äã\nIf you want a single image, you can do so using the CLI or Node.JS API.\nGIF‚Äã\nSee: Render as GIF\nTransparent videos‚Äã\nSee: Creating overlays\nSee also‚Äã\n\nCLI options\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousHow props get resolvedNextEncoding GuideRemotion StudioRemotion Studio deploymentCLISSRAWS LambdaGitHub ActionsGoogle Cloud RunVariantsAudio-onlyImage SequenceStill imagesGIFTransparent videosSee also"
  },
  {
    "title": "Debugging render failures",
    "markdown": "TroubleshootingDebugging render failuresOn this pageDebugging render failuresSince JavaScript code is executing, it may happen that a render may due to an exception. Here are general tips to troubleshoot the issue.\n1 \nEnable verbose logging\nBy enabling more detailed logging, all console.log statements from your code will be made visible alongside other debugging information.\nFrom the CLI: Add the --log=verbose flag to your render command.\nFrom Node.JS: Add the verbose: true options to renderMedia().\nnoteIf you see a log multiple times, it is because the render is split up to multiple threads. Set --concurrency=1 temporarily to only see each log once.\n2 \nAdding logs to your project\nUse console.log in your code to understand the order things are executing in and verify your assumptions about how your code should behave.\n3 \nRemove components one by one\nRemove components until the video is empty. At which point does the error disappear? This can help you identify the component responsible for the render failure.\n4 \nSearch issues and documentation\nIt's also helpful to check for issues on GitHub to see if other people have encountered similar problems. If you find an issue that matches your problem, you can add a comment to the issue to help the community troubleshoot the problem.\nAlso search the documentation which has over 300 pages and contains troubleshooting instructions for many common problems.\n5 \nAsk for help\nYou can ask for help on GitHub and Discord. Read on to see how to get help!\nSee also‚Äã\n\nDebug failed Lambda renders\nAsk for help\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousImport from After EffectsNextTimeoutsSee also"
  },
  {
    "title": "Linux Dependencies",
    "markdown": "MiscellaneousLinux DependenciesOn this pageLinux DependenciesIf you are on Linux, Chrome Headless Shell requires some shared libraries to be installed.\nUbuntu 24.04‚Äã\nbashRUN apt install -y \\  libnss3 \\  libdbus-1-3 \\  libatk1.0-0 \\  libasound2t64 \\  libxrandr2 \\  libxkbcommon-dev \\  libxfixes3 \\  libxcomposite1 \\  libxdamage1 \\  libgbm-dev \\  libatk-bridge2.0-0\nbashRUN apt install -y \\  libnss3 \\  libdbus-1-3 \\  libatk1.0-0 \\  libasound2t64 \\  libxrandr2 \\  libxkbcommon-dev \\  libxfixes3 \\  libxcomposite1 \\  libxdamage1 \\  libgbm-dev \\  libatk-bridge2.0-0\nOlder versions of Ubuntu‚Äã\nbashRUN apt install -y \\  libnss3 \\  libdbus-1-3 \\  libatk1.0-0 \\  libasound2 \\  libxrandr2 \\  libxkbcommon-dev \\  libxfixes3 \\  libxcomposite1 \\  libxdamage1 \\  libgbm-dev \\  libatk-bridge2.0-0\nbashRUN apt install -y \\  libnss3 \\  libdbus-1-3 \\  libatk1.0-0 \\  libasound2 \\  libxrandr2 \\  libxkbcommon-dev \\  libxfixes3 \\  libxcomposite1 \\  libxdamage1 \\  libgbm-dev \\  libatk-bridge2.0-0\nDebian‚Äã\nbashRUN apt install -y \\  libnss3 \\  libdbus-1-3 \\  libatk1.0-0 \\  libgbm-dev \\  libasound2 \\  libxrandr2 \\  libxkbcommon-dev \\  libxfixes3 \\  libxcomposite1 \\  libxdamage1 \\  libpango-1.0-0 \\  libcairo2 \\  libcups2 \\  libatk-bridge2.0-0\nbashRUN apt install -y \\  libnss3 \\  libdbus-1-3 \\  libatk1.0-0 \\  libgbm-dev \\  libasound2 \\  libxrandr2 \\  libxkbcommon-dev \\  libxfixes3 \\  libxcomposite1 \\  libxdamage1 \\  libpango-1.0-0 \\  libcairo2 \\  libcups2 \\  libatk-bridge2.0-0\nAmazon Linux 2023‚Äã\nbashRUN yum install -y \\  mesa-libgbm\t\\  libX11 \\  libXrandr\\  libdrm \\  libXdamage \\  libXfixes \\  dbus -libs\\  libXcomposite \\  alsa -lib \\  nss \\  dbus \\  at-spi2-core \\  atk \\  at-spi2-atk\nbashRUN yum install -y \\  mesa-libgbm\t\\  libX11 \\  libXrandr\\  libdrm \\  libXdamage \\  libXfixes \\  dbus -libs\\  libXcomposite \\  alsa -lib \\  nss \\  dbus \\  at-spi2-core \\  atk \\  at-spi2-atk\nAlpine Linux‚Äã\nNot supported due to to unsupported Libc symbols.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousChrome Headless ShellNext--gl flagUbuntu 24.04Older versions of UbuntuDebianAmazon Linux 2023Alpine Linux"
  },
  {
    "title": "Transforms",
    "markdown": "Designing visualsTransformsOn this pageTransforms\nAnimation occurs when the visual properties of an element transform over time.\nLet's look at five common ways to transform an element.\nAlready familiar with how to apply CSS transforms in React? Skip this page.\nThe 5 basic transformations‚Äã\n\nFrom left to right: Opacity, Scale, Skew, Translate, Rotate\nOpacity‚Äã\nThe opacity determines how visible the element is. 0 means fully invisible, 1 means fully visible. Values inbetween will make the element semi-transparent, and elements underneath will be visible.\nYou can set the opacity of an element using the opacity property.\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    opacity: 0.5,  }}/\u003e\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    opacity: 0.5,  }}/\u003e\n\"opacity\": 1 opacity1\nValues below 0 and above 1 are accepted, but have no further effect.\nScale‚Äã\nThe scale determines how big an element is. 1 is the natural size, 2 will make the element twice as tall and wide.\nValues below 1 will make the element smaller. 0 makes the element invisible. Values below 0 are accepted and will make the element bigger again, but mirrored.\nYou can set the scale of an element using the transform property.\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `scale(0.5)`,  }}/\u003e\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `scale(0.5)`,  }}/\u003e\n\"transform\": \"scale(1)\"A scale1\nThe difference to changing the size of the element using height and width is that using scale() will not change the layout of the other elements.\nSkew‚Äã\nSkewing an element will lead to a distorted appearance as if the the element has been stretched on two corners of the element. Skew takes an angle that can be specified using rad (radians) and deg (degrees).\nYou can set the skew of an element using the transform property.\nSee the explorer below to see how skewing affects an element.\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `skew(20deg)`,  }}/\u003e\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `skew(20deg)`,  }}/\u003e\n\"transform\": \"skew(0deg)\" skew0\nTranslate‚Äã\nTranslating an element means moving it. A translation can be done on the X, Y or even Z axis. The transformation can be specified in px.\nYou can set the translation of an element using the transform property.\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `translateX(100px)`,  }}/\u003e\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `translateX(100px)`,  }}/\u003e\n\"transform\": \"translateX(0px) translateY(0px)\" translateX0translateY0\nAs opposed to changing the position of an element using margin-top and margin-left, using translate() will not change the position of the other elements.\nRotate‚Äã\nBy rotating an element, you can make it appear as if it has been turned around its center. The rotation can be specified in rad (radians) or deg (degrees) and you can rotate an element around the Z axis (the default) but also around the X and Y axis.\nYou can set the translation of an element using the transform property.\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `rotate(45deg)`, // the same as rotateZ(45deg)  }}/\u003e\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `rotate(45deg)`, // the same as rotateZ(45deg)  }}/\u003e\n\"transform\": \"rotateZ(0deg)\"A rotateZ0\nIf you want to rotate an element around the X or Y axis, you should apply the perspective property to the parent element.\nIf you don't want to rotate around the center, you can use the transform-origin property to change the origin of the rotation.\nNote that when rotating SVG elements, the transform origin is the top left corner by default. You can get the same behavior as for the other elements by adding style={{transformBox: 'fill-box', transformOrigin: 'center center'}}.\nMultiple transformations‚Äã\nOftentimes, you want to combine multiple transformations. If they use different CSS properties like transform and opacity, simply specify both properties in the style object.\nIf both transformations use the transform property, specify multiple transformations separated by a space.\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `translateX(100px) scale(2)`,  }}/\u003e\nMyComponent.tsxtsx\u003cdiv  style={{    height: 100,    width: 100,    backgroundColor: \"red\",    transform: `translateX(100px) scale(2)`,  }}/\u003e\nNote that the order matters. The transformations are applied in the order they are specified.\nUsing the makeTransform() helper‚Äã\nInstall @remotion/animation-utils to get a type-safe helper function to generate transform strings.\ntsximport { makeTransform, rotate, translate } from \"@remotion/animation-utils\";¬†const transform = translate(50, 50);// =\u003e \"translate(50px, 50px)\"¬†const multiTransform = makeTransform([rotate(45), translate(50, 50)]);// =\u003e \"rotate(45deg) translate(50px, 50px)\"\ntsximport { makeTransform, rotate, translate } from \"@remotion/animation-utils\";¬†const transform = translate(50, 50);// =\u003e \"translate(50px, 50px)\"¬†const multiTransform = makeTransform([rotate(45), translate(50, 50)]);// =\u003e \"rotate(45deg) translate(50px, 50px)\"\nMore ways to transform objects‚Äã\nThese are just some of the basic transformations. Here are some more transformations that are possible:\n\nThe height and width of a \u003cdiv\u003e\nThe rounded edges of an element using border-radius\nThe shadow of an element using box-shadow\nThe color of something using color and interpolateColors()\nThe evolution of a SVG path using evolvePath()\nThe weight and slant of a dynamic font\nThe stops of a linear-gradient\nThe values of a CSS filter()\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousPreview your videoNextAssetsThe 5 basic transformationsOpacityScaleSkewTranslateRotateMultiple transformationsUsing the makeTransform() helperMore ways to transform objects"
  },
  {
    "title": "Making components reusable",
    "markdown": "Getting startedReuse componentsOn this pageMaking components reusable\nReact components allow us to encapsulate video logic and reuse the same visuals multiple times.\nConsider a title - to make it reusable, factor it out into its own component:\nMyComposition.tsxtsximport {AbsoluteFill, interpolate, useCurrentFrame} from 'remotion';¬†const Title: React.FC\u003c{title: string}\u003e = ({title}) =\u003e {  const frame = useCurrentFrame();  const opacity = interpolate(frame, [0, 20], [0, 1], {    extrapolateRight: 'clamp',  });¬†  return (    \u003cdiv style={{opacity, textAlign: 'center', fontSize: '7em'}}\u003e{title}\u003c/div\u003e  );};¬†export const MyVideo = () =\u003e {  return (    \u003cAbsoluteFill\u003e      \u003cTitle title=\"Hello World\" /\u003e    \u003c/AbsoluteFill\u003e  );};\nMyComposition.tsxtsximport {AbsoluteFill, interpolate, useCurrentFrame} from 'remotion';¬†const Title: React.FC\u003c{title: string}\u003e = ({title}) =\u003e {  const frame = useCurrentFrame();  const opacity = interpolate(frame, [0, 20], [0, 1], {    extrapolateRight: 'clamp',  });¬†  return (    \u003cdiv style={{opacity, textAlign: 'center', fontSize: '7em'}}\u003e{title}\u003c/div\u003e  );};¬†export const MyVideo = () =\u003e {  return (    \u003cAbsoluteFill\u003e      \u003cTitle title=\"Hello World\" /\u003e    \u003c/AbsoluteFill\u003e  );};\nTo render multiple instances of the title, duplicate the \u003cTitle\u003e component.\nYou can also use the \u003cSequence\u003e component to limit the duration of the first title and time-shift the appearance of the second title.\ntsximport {Sequence} from 'remotion';¬†export const MyVideo = () =\u003e {  return (    \u003cAbsoluteFill\u003e      \u003cSequence durationInFrames={40}\u003e        \u003cTitle title=\"Hello\" /\u003e      \u003c/Sequence\u003e      \u003cSequence from={40}\u003e        \u003cTitle title=\"World\" /\u003e      \u003c/Sequence\u003e    \u003c/AbsoluteFill\u003e  );};\ntsximport {Sequence} from 'remotion';¬†export const MyVideo = () =\u003e {  return (    \u003cAbsoluteFill\u003e      \u003cSequence durationInFrames={40}\u003e        \u003cTitle title=\"Hello\" /\u003e      \u003c/Sequence\u003e      \u003cSequence from={40}\u003e        \u003cTitle title=\"World\" /\u003e      \u003c/Sequence\u003e    \u003c/AbsoluteFill\u003e  );};\nYou should see two titles appearing after each other.\nNote that the value of useCurrentFrame() has been shifted in the second instance, so that it returns 0 only when the absolute time is 40. Before that, the sequence was not mounted at all.\nSequences by default are absolutely positioned - you can use layout=\"none\" to make them render like a regular \u003cdiv\u003e.\nSee also‚Äã\n\n\u003cSequence\u003e component\nHow do I combine compositions?\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousAnimating propertiesNextPreview your videoSee also"
  },
  {
    "title": "@remotion/media-parser",
    "markdown": "Media ParserOn this page@remotion/media-parseravailable from v4.0.190\nThis is an experimental package that parses video and other media files in order to extract relevant metadata.\nwarningUnstable API: This package is experimental. We might change the API at any time, until we remove this notice.\nDesign goals:\n\nSupport as many relevant containers as possible - currently: .mp4, .mov, .webm, .mkv, .avi, .ts\nWork in the browser, and server runtimes (Node.js, Bun, Edge, etc.)\nEnable powerful WebCodecs use cases\nFine-grained querying, only download as much data as necessary\nFunctional TypeScript API\nBe useful when passing unsupported media\nSolve problems that are relevant for Remotion users\n\nInstallation‚Äã\nnpmyarnpnpmbunnpm i --save-exact @remotion/media-parser@4.0.241Copynpm i --save-exact @remotion/media-parser@4.0.241Copypnpm i @remotion/media-parser@4.0.241Copypnpm i @remotion/media-parser@4.0.241Copybun i @remotion/media-parser@4.0.241Copybun i @remotion/media-parser@4.0.241Copyyarn --exact add @remotion/media-parser@4.0.241Copyyarn --exact add @remotion/media-parser@4.0.241CopyThis assumes you are currently using v4.0.241 of Remotion.Also update remotion and all `@remotion/*` packages to the same version.Remove all ^ character in front of the version numbers of it as it can lead to a version conflict.\nGuide‚Äã\nGetting video metadataSimple examples of extracting video metadataFast and slow operationsEfficently use parseMedia()Extract ID3 tags and EXIF dataGet embedded tags from video filesRuntime supportsWhere you can run Media ParserWebCodecsHow Media Parser integrates with WebCodecs\nAPIs‚Äã\nThe following APIs are available:\nparseMedia()Parse a media file.nodeReaderRead a file from the local file system.fetchReaderRead a file using fetch().webFileReaderRead a file from \u003cinput type=\"file\"\u003e.\nLicense‚Äã\nRemotion LicenseImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousUninstall Cloud RunNextGetting video metadataInstallationGuideAPIsLicense"
  },
  {
    "title": "Server-Side Rendering",
    "markdown": "Server-side renderingOn this pageServer-Side RenderingRemotion's rendering engine is built with Node.JS, which makes it easy to render a video in the cloud.\nRender a video on AWS Lambda‚Äã\nThe easiest and fastest way to render videos in the cloud is to use @remotion/lambda.\nRender a video using Node.js APIs‚Äã\nWe provide a set of APIs to render videos using Node.js and Bun.\nSee an example or the API reference for more information.\nRender using GitHub Actions‚Äã\nThe Hello World starter template includes a GitHub Actions workflow file .github/workflows/render-video.yml.\n1  Commit the template to a GitHub repository.\n2  On GitHub, click the Actions tab.\n3  Select the Render video workflow on the left.\n4  A Run workflow button should appear. Click it.\n5  Fill in the props of the root component and click Run workflow. \n6  After the rendering is finished, you can download the video under Artifacts.\nNote that running the workflow may incur costs. However, the workflow will only run if you actively trigger it.\nSee also: Passing input props in GitHub Actions\nRender a video using Docker‚Äã\nSee: Dockerizing a Remotion project\nRender a video using GCP Cloud Run (Alpha)‚Äã\nCheck out the experimental Cloud Run package.\nOur plan is to port the Lambda runtime to Cloud Run instead of maintaining a separate implementation.\nAPI reference‚Äã\ngetCompositions()List available compositionsselectComposition()Get a compositionrenderMedia()Render a video or audiorenderFrames()Render a series of imagesrenderStill()Render a single imagestitchFramesToVideo()Turn images into a videoopenBrowser()Open a Chrome browser to reuse across rendersensureBrowser()Open a Chrome browser to reuse across rendersmakeCancelSignal()Create token to later cancel a rendergetVideoMetadata()Get metadata from a video file in Node.jsgetSilentParts()Obtain silent portions of a video or audioensureFfmpeg()Check for ffmpeg binary and install if not existingensureFfprobe()Check for ffprobe binary and install if not existinggetCanExtractFramesFast()Probes for fast extraction for \u003cOffthreadVideo\u003eImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousDeploy to a VPSNextOverviewRender a video on AWS LambdaRender a video using Node.js APIsRender using GitHub ActionsRender a video using DockerRender a video using GCP Cloud Run (Alpha)API reference"
  },
  {
    "title": "Remotion Recorder | Remotion | Make videos programmatically",
    "markdown": "RecorderIntroductionOn this page\nThe Remotion Recorder is a video production tool built entirely in JavaScript.\nRecording‚Äã\nRecord your facecam and screen in sync but independently. This allows you to create a dynamic layout later.\nRecord webcam and display as separate streams. Up to 4 sources can be recorded at the same time!Ensure you are in the center of the video and you are not too close to the microphone.\nDifferent platforms require different formats‚Äã\nEach platform has its own conventions for how videos should look.\nWIPTwitter, LinkedIn1:1Muted by defaultCaptions burned inYouTube16:9Audio by defaultCaptions as .srt file Endcard with related videosTikTok, Reels, Shorts planned9:16Safe space at bottom requiredWord-by-word captions\nThe goal of the Recorder: Edit once and feel native on each platform.\nThis has a measurable impact on the performance of your post: For example, a 1:1 video on X results in 30-35% higher video views and a 80-100% higher engagement rate.\nCaptions are essential‚Äã\nGenerate captions locally using Whisper.cpp. The Recorder will automatically install it for you.\nAI will make mistakes - so we make it easy to correct them.\nCaptions have word-level timingsOrphan words are avoided by balancing the text layoutUse backticks to highlight technical termsFix captions quickly by clicking on a wordWrite a JavaScript function to fix common misspellingsCaptions are stored as editable JSON\nAgnostic endcards‚Äã\nYour viewer watched the entire video! Now don't make them forget about you.\nIf you post on Twitter, the call-to-action is \"Follow\" and your other platforms\nare linked.If you post on YouTube, the call to action is \"Subscribe\" and cutouts for related\nvideos are made.\nThe endcard is written with React and CSS, so can be easily customized.\nCustomization‚Äã\nHaving access to the entire source code, you can use CSS to customize the look of the Recorder.\nLook of the built-in light themeLook of the built-in dark themeUse CSS to make it your own!\nThe Recorder is built with TypeScript and React, and you can fully customize it's behavior.\nIt's a hackable video editor.\nSilence removal‚Äã\nAutomatically remove the silence at the start and end of your take.\nMusic‚Äã\nAdd background music to your video and automatically fade between the different sections.\nThree exclusive tracks are included that you may use for your video.\nLayouting‚Äã\nWhether you only record your facecam, or also your display, the Recorder always finds the ideal layout - even if you mix landscape and portrait videos.\nTransitions‚Äã\nEnable clean transitions between scenes - no matter if you change the layout during the video.\nChapters‚Äã\nMark a scene as the beginning of a new chapter and automatically generate animated chapters.\nB-Roll‚Äã\nAdd images and videos on top of your facecam or display while your voiceover is playing to give the video more depth.\nExporting‚Äã\nExport your video with much control over the encoding options.\nRender a video with a single click on a button, the CLI, Node.JS APIs, GitHub Actions, or even on AWS Lambda!\nCustomization‚Äã\nThe Remotion Recorder ships source code.\nYou can customize it to your liking if you have TypeScript and React knowledge.\n\n1) 9:16 format is not yet implemented.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024NextBefore you buyRecordingDifferent platforms require different formatsCaptions are essentialAgnostic endcardsCustomizationSilence removalMusicLayoutingTransitionsChaptersB-RollExportingCustomization"
  },
  {
    "title": "Contributing to Remotion",
    "markdown": "ContributingGeneral informationOn this pageContributing to RemotionIssues and pull requests of all sorts are welcome!\nFor bigger projects, please coordinate with Jonny Burger (jonny@remotion.dev, Discord: @jonnyburger) to make sure your changes get merged.\nPlease note that since we charge for Remotion when companies are using it, this is a commercial project.\nBy sending pull requests, you agree that we can use your code changes in a commercial context.\nFurthermore, also note that you cannot redistribute this project. Please see LICENSE.md for what's allowed and what's not.\nThis project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.\nSetup‚Äã\n1  Remotion uses \npnpm v8.10.2\n as the package manager for development in this repository. We recommend\nusing Corepack so you get the same version of pnpm as we have. \nshcorepack enable\nshcorepack enable\nIf you don't have corepack, install pnpm@8.10.2 manually:\nshnpm i -g pnpm@8.10.2\nshnpm i -g pnpm@8.10.2\nPrefix with sudo if necessary.\nThe version must be 8.10.2.\nWe use Bun to speed up some parts of the build.\nInstall at least Bun 1.1.7 on your system - see https://bun.sh/ for instructions.\n2  Clone the Remotion repository:\nshgit clone --depth=1 https://github.com/remotion-dev/remotion.git \u0026\u0026 cd remotion\nshgit clone --depth=1 https://github.com/remotion-dev/remotion.git \u0026\u0026 cd remotion\nnoteThe full Git history of Remotion is large. To save time and disk space, we recommend adding --depth=1 to only clone the most recent main branch.\n3  Install all dependencies:\nshpnpm i\nshpnpm i\n4  Build the project initially:\nshpnpm build\nshpnpm build\n5  Rebuild whenever a file changes:\nshpnpm watch\nshpnpm watch\n6  You can start making changes!\nTesting your changes‚Äã\nYou can start the Testbed using\nshcd packages/examplepnpm run dev\nshcd packages/examplepnpm run dev\nYou can render a test video using\nshcd packages/examplepnpm exec remotion render\nshcd packages/examplepnpm exec remotion render\nYou can run tests using\nshpnpm test\nshpnpm test\nin either a subpackage to run tests for that package or in the root to run all tests.\nRunning the @remotion/player testbed‚Äã\nYou can test changes to @remotion/player by starting the Player testbed:\nshcd packages/player-examplepnpm run dev\nshcd packages/player-examplepnpm run dev\nFor information about testing, please consult TESTING.md. Issues and pull requests of all sorts are welcome!\nRunning documentation‚Äã\nYou can run the Docusaurus server that powers our docs using:\nshcd packages/docspnpm start\nshcd packages/docspnpm start\nRunning the CLI‚Äã\nYou can test changes to the CLI by moving to packages/examples directory and using pnpm exec to execute the CLI:\nshcd packages/examples# Example - Get available compositionspnpm exec remotion compositions# Example - Render commandpnpm exec remotion render ten-frame-tester --output ../../out/video.mp4\nshcd packages/examples# Example - Get available compositionspnpm exec remotion compositions# Example - Render commandpnpm exec remotion render ten-frame-tester --output ../../out/video.mp4\nTesting Remotion Lambda‚Äã\nIn packages/example, there is a runlambda.sh script that will rebuild the code for the Lambda function, remove any deployed Lambda functions, deploy a new one and render a video.\nYou need to put you AWS credentials in a .env file of the packages/example directory.\nshcd packages/examplesh ./runlambda.sh\nshcd packages/examplesh ./runlambda.sh\nnoteThis will delete any Lambda functions in your account!\nTesting Remotion Cloud Run‚Äã\nIn packages/example, there is a runcloudrun.sh script that will rebuild the code for the Cloud Run function, remove any deployed Cloud Run services, deploy a new one and render a video.\nYou need to put you GCP credentials in a .env file of the packages/example directory.\nshcd packages/examplesh ./runcloudrun.sh\nshcd packages/examplesh ./runcloudrun.sh\nnoteThis will delete any Cloud Run services in your account!\nTroubleshooting‚Äã\nIf your pnpm build throws errors, oftentimes it is because of caching issues. You can resolve many of these errors by running\ntspnpm run clean\ntspnpm run clean\nin the root directory. Make sure to beforehand kill any pnpm watch commands, as those might regenerate files as you clean them!\nDeveloping Rust parts‚Äã\nTo develop the Rust parts of Remotion, see here.\nSee also‚Äã\n\nImplementing a new feature\nImplementing a new option\nWriting documentation\nHow to take a bounty issue\nFormatting guidelines\nAuthoring Remotion libraries\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousDifference to Motion CanvasNextImplementing a new featureSetupTesting your changesRunning the @remotion/player testbedRunning documentationRunning the CLITesting Remotion LambdaTesting Remotion Cloud RunTroubleshootingDeveloping Rust partsSee also"
  },
  {
    "title": "License \u0026 Pricing",
    "markdown": "License \u0026 PricingLicense \u0026 PricingRemotion is free to use if you are:\n\nan individual\na for-profit organisation with up to 3 employees\na non-profit or not-for-profit organisation\nevaluating whether Remotion is a good fit, and are not yet using it in a commercial way\n\nIf you don't qualify for any of the above, you need to acquire a company license. Visit remotion.pro for pricing and buying a license.\nWhen in doubt, read the LICENSE file and the Company License FAQ before using Remotion. You can contact us if you need clarification whether you can use Remotion in your project for free.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousIneligible for bountiesNextAcknowledgements"
  },
  {
    "title": "Terminology",
    "markdown": "TerminologyOn this pageTerminologyHere we try to explain the meaning of some terms that are used often in the documentation, but are not self-explanatory. Which terms would you like to have explained? Let us know!\nComposition‚Äã\nComposition\nSequence‚Äã\nSequence\nComposition ID‚Äã\nComposition ID\nBundle‚Äã\nRemotion Bundle\nServe URL‚Äã\nServe URL\nPublic Dir‚Äã\nPublic Dir\nRemotion Root‚Äã\nRemotion Root\nEntry point‚Äã\nEntry point\nRemotion Studio‚Äã\nRemotion Studio\nRemotion Preview‚Äã\nRemotion Preview\nRemotion Player‚Äã\nRemotion Player\nConcurrency‚Äã\nConcurrency\nInput props‚Äã\nInput Props\nCloud Run URL‚Äã\nCloud Run URL\nService Name‚Äã\nService NameImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousUpgrading RemotionNextRemotion PlayerCompositionSequenceComposition IDBundleServe URLPublic DirRemotion RootEntry pointRemotion StudioRemotion PreviewRemotion PlayerConcurrencyInput propsCloud Run URLService Name"
  },
  {
    "title": "Parameterized videos",
    "markdown": "Parameterized videosOn this pageParameterized videosRemotion allows for ingesting, validating, visually editing, and transforming data that may be used to parametrize a video.\nData may influence the content of the video, or the metadata such as width, height, duration or framerate.\nHigh-level overview‚Äã\nRemotion allows the passing of props to a React component.\nProps are a React concept and take the shape of a JavaScript object.\nTo determine the data which gets passed to the video, the following steps are taken:\n1  Default props are defined statically, so that the video can be designed in the Studio without any data. \nThe default props define the shape of the data.A schema can be defined and validated.In absence of data, default props can be edited in the Remotion Studio.\n2  Input props may be specified when rendering a video to override the default props.\nInput props will be merged together with default props, where input props have priority.\n3  Using calculateMetadata(), postprocessing of the props may be performed and metadata be dynamically calculated.\nFor example, given a URL is passed as a prop, it may be fetched and the content added to the props.Asynchronous calculation of the video duration and other metadata is also possible here.\n4  The final props are passed to the React component.\nThe component may dynamically render content based on the props.\nSee here for a visual explanation and more details of how the resolution process works.\nTable of contents‚Äã\n\nPassing props\nDefining a Schema\nVisual editing\nData fetching\nVariable metadata\nHow props get resolved\n\nSee also‚Äã\nYou can use the Remotion Player to display a Remotion component in a React app and dynamically change the content without rendering the video, to create experiences where the content updates in real-time.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024Previous\u003cOffthreadVideo\u003e vs. \u003cVideo\u003eNextPassing propsHigh-level overviewTable of contentsSee also"
  },
  {
    "title": "Get help",
    "markdown": "Get helpOn this pageGet helpTo receive help, either:\n1  File an issue under remotion.dev/issue \n2  Write in the #help channel or #help-forum on remotion.dev/discord\nProvide information‚Äã\nProvide information that seems relevant to the issue. The more information that you give, the more we are able to help!\nWhen you get an error:\n1  Paste the full error message, including stack trace. \n2  Provide the code or command that caused this error. \n\nWhen you don't get an error:\n1  Provide the code or command that you executed. \n2  Describe what you expected. \nAlways mention the Remotion version:\nnpx remotion versions\nnpx remotion versions\nInvestigate yourself‚Äã\nThe following might also be useful information to us:\n1  What have you already tried?\n2  Do you have an suspicion what might cause the issue?\n3  Does the issue go away if you delete certain code?\n4  Do you have any unusual parts in your stack or OS?\nDo‚Äã\n1  Use search engines or ChatGPT to solve React-specific problems. \n2  Search over 1100+ GitHub issues and 400+ documentation pages. \n3  Attempt to find the root cause of an issue by narrowing down the code.\n4  Provide relevant code snippets or reproductions.\nDo not‚Äã\n1  Ask for support using email or direct messages. \n2  Ask without searching the docs first. \nPaid support‚Äã\nOur Remotion Experts are available for technical advice and guidance. With their extensive experience in creating Remotion projects, they will surely be of great help.\nYou can also request a consultation session with Remotion's creator here.\nThis is the only way to receive support via video call fom the Remotion team.\nSupport policy‚Äã\nSee our policy on providing support.\nSee also‚Äã\n\nDebugging render failures\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024Previousv2.0 MigrationNextSupport PolicyProvide informationInvestigate yourselfDoDo notPaid supportSupport policySee also"
  },
  {
    "title": "Starting the Studio",
    "markdown": "StudioStarting the StudioOn this pageStarting the StudioUsing the Remotion Studio, you can preview your video, and if a server is connected, even render the video.\nPrerequisites‚Äã\nThe Remotion CLI is required for this guide.\nMost templates have it out of the box, but you can install it by running the following command in your terminal:\nnpmpnpmyarnbunbashnpm i @remotion/cli\nbashnpm i @remotion/clibashpnpm i @remotion/cli\nbashpnpm i @remotion/clibashyarn add @remotion/cli\nbashyarn add @remotion/clibashbun i @remotion/cli\nbashbun i @remotion/cli\nLaunching the Studio‚Äã\nYou can start the Remotion Studio by running the following command in your terminal:\nRegular templatesNext.js and Remix templatesbashnpm start\nbashnpm startbashnpm run remotion\nbashnpm run remotion\nThis is a shorthand for the studio command of the Remotion CLI:\nbashnpx remotion studio\nbashnpx remotion studio\nSee the available options here.\nA server will be started on port 3000 (or a higher port if it isn't available) and the Remotion Studio should open in the browser.\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousHardware accelerationNextKeyboard navigationPrerequisitesLaunching the Studio"
  },
  {
    "title": "Cloud Run Alpha",
    "markdown": "Cloud RunOn this pageCloud Run AlphaHelp us shape Remotion Cloud Run!\nCloud Run is an alternative option to Remotion Lambda. Where Lambda offers a cloud-based rendering solution on AWS (Amazon Web Services), Cloud Run makes use of GCP (Google Cloud Platform).\nWhat to test‚Äã\nWe are looking for feedback on the experience of setting up a GCP Project for Remotion Cloud Run, as well as the required components for rendering on the cloud:\n\nDeploy a rendering service (in Lambda, a service is known as a function).\nDeploy a Remotion project to GCP Cloud Storage (in Lambda, the storage solution is S3).\nRender a composition stored in Cloud Storage on a Cloud Run service.\n\nWe are welcoming any bug reports.\n1. Install @remotion/cloudrun‚Äã\nnpmyarnpnpmbunnpm i --save-exact @remotion/cloudrun@4.0.241Copynpm i --save-exact @remotion/cloudrun@4.0.241Copypnpm i @remotion/cloudrun@4.0.241Copypnpm i @remotion/cloudrun@4.0.241Copybun i @remotion/cloudrun@4.0.241Copybun i @remotion/cloudrun@4.0.241Copyyarn --exact add @remotion/cloudrun@4.0.241Copyyarn --exact add @remotion/cloudrun@4.0.241CopyThis assumes you are currently using v4.0.241 of Remotion.Also update remotion and all `@remotion/*` packages to the same version.Remove all ^ character in front of the version numbers of it as it can lead to a version conflict.\nFrom v4.0.18, Cloud run is distributed together with the main release of Remotion. Before that, you had to install the alpha release (see below).\nChangelog (moved)‚Äã\nFrom 4.0.18 on, see changes here.\n4.0.18‚Äã\nRemotion Cloud Run is now distributed together with the main release of Remotion. You no longer need to switch to the alpha release, although Remotion Cloud Run is still alpha software. The changelog is now part of the main changelog.\n4.1.0-alpha12‚Äã\nIncludes features and bugfixes from v4.0.17.\nIncludes a fix for streaming progress sometimes throwing an exception.\n4.1.0-alpha11‚Äã\nIncludes bugfixes from v4.0.12.\n4.1.0-alpha9‚Äã\nKnown issues‚Äã\n\nany internal errors created by Remotion from within the service are not currently sent back in the error response to the renderMediaOnCloudrun and renderStillOnCloudrun APIs (these APIs are also used within the CLI). For these errors, users will need to check the logs for now.\n\nImprovements‚Äã\n\nArtifact registry, used to store versioned images for deploying services, now has two folders - production and development.\nProvide helpful response when Cloud Run crashes during render.\n\nCLI alerts user there was a crash, fetches logs, determines if cause was likely memory or timeout issue.\nAPI can receive a success or crash response\nNew response documented\n\n\nDefault concurrency for rendering media is now 100%. This will set the concurrency equal to the number of cores the deployed service has.\n\n4.1.0-alpha5‚Äã\n\nFix input props not working for dynamic metadata\nApply changes from 4.0.0-alpha20.\n\n4.1.0-alpha4‚Äã\nFixed schema error when invoking a render.\nBug fixes leading to public testing.\nIssueResolutionRendering a still via CLI with defaults results in error - You can only pass the quality option if imageFormat is 'jpeg'.Migrated to V4 method, using internalRenderStill() instead of renderStill(). Noticed missing options, added them in and documented.\n4.1.0-alpha3‚Äã\nBug fixes leading to public testing.\nIssueResolutionWhen deploying a service, the image didn't exist in Google Artifact Registry.Added publish script that runs submit.mjs, automatically deploying the image, tagged with the version number.Functions folder wasn't included in dist folder, so no CLI commandswould work.Removed this from .npmignore, so that it is included.When using the CLI to request a render without passing a composition name, it fails to list out compositions to choose fromIssue raised, present in V4 for Lambda also.Service name structuring clips off alpha version denominator. During alpha, this will make it impossible to deploy multiple services spanning alpha versions.Create new name formatting that meets requirements. Added tests for this.CLI commands for rendering not aligned with Remotion Lambda.npx remotion cloudrun render media is now npx remotion cloudrun render.npx remotion cloudrun render still is now npx cloudrun remotion still.Documentation also updated.\n4.1.0-alpha2‚Äã\nInitial cloud run alpha release üéâ.Improve this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousFunction naming conventionNextOverviewWhat to test1. Install @remotion/cloudrunChangelog (moved)4.0.184.1.0-alpha124.1.0-alpha114.1.0-alpha94.1.0-alpha54.1.0-alpha44.1.0-alpha34.1.0-alpha2"
  },
  {
    "title": "@remotion/lambda",
    "markdown": "LambdaOn this page@remotion/lambdaAlso available as a 11min video Integrate Remotion Lambda into your app\nRender Remotion videos on AWS Lambda. This is the fastest and most scalable way to render Remotion videos.\nYou only pay while you are rendering, making it very cost-effective.\n\nWhen should I use it?‚Äã\n\nYour videos are less than 80 minutes long at Full HD. approximately until the 15min AWS Timeout limit is hit\nYou stay within the (AWS Lambda Concurrency Limit) or you are requesting an increase from AWS.\nYou are fine with using Amazon Web Services in one of the supported regions.\n\nIf one of those constraints is a dealbreaker for you, resort to normal server-side rendering or consider using Cloud Run.\nSee also: Comparison of server-side rendering options\nHow it works‚Äã\n\nA Lambda function and a S3 bucket is created on AWS.\nA Remotion project gets deployed to a S3 bucket as a website.\nThe Lambda function gets invoked and opens the Remotion project.\nA lot of Lambda functions are created in parallel which each render a small part of the video\nThe initial Lambda function downloads the videos and stitches them together.\nThe final video gets uploaded to S3 and is available for download.\n\nSee in more detail: How Remotion Lambda works\nArchitecture‚Äã\n\nLambda function: Requires a layer with Chromium, currently hosted by Remotion. Only one Lambda function is required, but it can execute different actions.\nS3 bucket: Stores the projects, the renders, and render metadata.\nCLI: Allows to control the overall architecture from the command line. Is installed by adding @remotion/lambda to a project.\nNode.JS API: Has the same features as the CLI but is easier to use programmatically\n\nSetup / Installation‚Äã\nSee here\nRegion selection‚Äã\nThe following regions are available for Remotion Lambda:\neu-central-1 eu-west-1 eu-west-2 eu-west-3 eu-south-1 eu-north-1 us-east-1 us-east-2 us-west-1 us-west-2 af-south-1 ap-south-1 ap-east-1 ap-southeast-1 ap-southeast-2 ap-northeast-1 ap-northeast-2 ap-northeast-3 ca-central-1 me-south-1 sa-east-1 \nSee here for configurations and considerations.\nLimitations‚Äã\n\nYou only have up to 10GB of storage available in a Lambda function. This must be sufficient for both the separated chunks and the concatenated output, therefore the output file can only be about 5GB maximum, limiting the maximum video length to around 2 hours of Full HD video.\nLambda has a global limit of 1000 concurrent lambdas per region by default, although it can be increased.\n\nCost‚Äã\nMost of our users render multiple minutes of video for just a few pennies. The exact cost is dependent on the region, assigned memory, type of video, parallelization and other parameters. For each render, we estimate a cost and display it to you. You might also need a Remotion license (see below).\nAWS permissions‚Äã\nRemotion Lambda requires you to create an AWS account and create a user with some permissions attached to it. We require only the minimal amount of permissions required for operating Remotion Lambda.\nRead more about permissions\nCLI‚Äã\nYou can control Remotion Lambda using the npx remotion lambda command.\nRead more about the CLI\nNode.JS API‚Äã\nEverything you can do using the CLI, you can also control using Node.JS APIs. See the reference here.\nLicense‚Äã\nThe standard Remotion license applies. https://github.com/remotion-dev/remotion/blob/main/LICENSE.md\nCompanies need to buy 1 cloud rendering seat per 2000 renders per month - see https://remotion.pro\nUninstalling‚Äã\nWe make it easy to remove all Remotion resources from your AWS account without leaving any traces or causing further costs.\nHow to uninstall Remotion LambdaImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousMedia KeysNextSetupWhen should I use it?How it worksArchitectureSetup / InstallationRegion selectionLimitationsCostAWS permissionsCLINode.JS APILicenseUninstalling"
  },
  {
    "title": "Different segments at different speeds",
    "markdown": "SnippetsDifferent segments at different speedsOn this pageDifferent segments at different speedsIf you have a video and want to show different sections of the video at different speeds, use the following snippet.\nSegmentSpeeds.tsxtsximport {OffthreadVideo, Sequence, staticFile, useCurrentFrame} from 'remotion';¬†const segments = [  {    duration: 100,    speed: 0.5,  },  {    duration: 100,    speed: 1,  },  {    duration: 200,    speed: 2,  },  {    duration: 400,    speed: 4,  },];¬†type AccumulatedSegment = {  start: number;  passedVideoTime: number;  end: number;  speed: number;};¬†export const accumulateSegments = () =\u003e {  const accumulatedSegments: AccumulatedSegment[] = [];  let accumulatedDuration = 0;  let accumulatedPassedVideoTime = 0;¬†  for (const segment of segments) {    const duration = segment.duration / segment.speed;    accumulatedSegments.push({      end: accumulatedDuration + duration,      speed: segment.speed,      start: accumulatedDuration,      passedVideoTime: accumulatedPassedVideoTime,    });¬†    accumulatedPassedVideoTime += segment.duration;    accumulatedDuration += duration;  }¬†  return accumulatedSegments;};¬†export const SpeedSegments = () =\u003e {  const frame = useCurrentFrame();  const accumulated = accumulateSegments();¬†  const currentSegment = accumulated.find(    (segment) =\u003e frame \u003e segment.start \u0026\u0026 frame \u003c= segment.end,  );¬†  if (!currentSegment) {    return;  }¬†  return (    \u003cSequence from={currentSegment.start}\u003e      \u003cOffthreadVideo        pauseWhenBuffering        startFrom={currentSegment.passedVideoTime}        // Remotion will automatically add a time fragment to the end of the video URL        // based on `startFrom`. Opt out of this by adding one yourself.        // https://www.remotion.dev/docs/media-fragments        src={`${staticFile('bigbuckbunny.mp4')}#t=0,`}        playbackRate={currentSegment.speed}      /\u003e    \u003c/Sequence\u003e  );};\nSegmentSpeeds.tsxtsximport {OffthreadVideo, Sequence, staticFile, useCurrentFrame} from 'remotion';¬†const segments = [  {    duration: 100,    speed: 0.5,  },  {    duration: 100,    speed: 1,  },  {    duration: 200,    speed: 2,  },  {    duration: 400,    speed: 4,  },];¬†type AccumulatedSegment = {  start: number;  passedVideoTime: number;  end: number;  speed: number;};¬†export const accumulateSegments = () =\u003e {  const accumulatedSegments: AccumulatedSegment[] = [];  let accumulatedDuration = 0;  let accumulatedPassedVideoTime = 0;¬†  for (const segment of segments) {    const duration = segment.duration / segment.speed;    accumulatedSegments.push({      end: accumulatedDuration + duration,      speed: segment.speed,      start: accumulatedDuration,      passedVideoTime: accumulatedPassedVideoTime,    });¬†    accumulatedPassedVideoTime += segment.duration;    accumulatedDuration += duration;  }¬†  return accumulatedSegments;};¬†export const SpeedSegments = () =\u003e {  const frame = useCurrentFrame();  const accumulated = accumulateSegments();¬†  const currentSegment = accumulated.find(    (segment) =\u003e frame \u003e segment.start \u0026\u0026 frame \u003c= segment.end,  );¬†  if (!currentSegment) {    return;  }¬†  return (    \u003cSequence from={currentSegment.start}\u003e      \u003cOffthreadVideo        pauseWhenBuffering        startFrom={currentSegment.passedVideoTime}        // Remotion will automatically add a time fragment to the end of the video URL        // based on `startFrom`. Opt out of this by adding one yourself.        // https://www.remotion.dev/docs/media-fragments        src={`${staticFile('bigbuckbunny.mp4')}#t=0,`}        playbackRate={currentSegment.speed}      /\u003e    \u003c/Sequence\u003e  );};\nSee also‚Äã\n\nChange the speed of a video over time\nJump Cutting\nImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousStuck rendersNextEmbedding a \u003cPlayer\u003e into an \u003ciframe\u003eSee also"
  },
  {
    "title": "Security Best Practices",
    "markdown": "MiscellaneousSecurityOn this pageSecurity Best PracticesRemotion is a software that can generate videos programmatically. It does so by running a headless browser, capturing images, and encoding them into a video. This in itself does not pose a security risk. However, Remotion interacts with the Web, can be used in the cloud and uses the NPM ecosystem.\nEnvironment variables‚Äã\nWhen starting the Remotion Studio or running a render via the command line, environment variables that are prefixed with REMOTION_ and .env are passed to the headless browser. You are responsible to ensure those environment variables do not exposed to other services as you are interfacing with the Web.\nCredentials on the web‚Äã\nYou should not try to call renderMediaOnLambda() or other APIs from @remotion/lambda from your app frontend. Those APIs can only be called with AWS credentials, meaning that you would have to expose your AWS credentials to the web. This is a security risk and should be avoided.\ndisableWebSecurity flag‚Äã\nWe provide as a workaround for CORS issues the disableWebSecurity flag. This flag disables the same-origin policy in the headless browser. If you are using it, you need to be aware of the implications of it and assess whether this can pose a security risk to you.\nDDoS attacks‚Äã\nAPIs such as renderMedia() and renderMediaOnLambda() may be expensive (computationally or financially) to run. You should ensure that you are not exposing those APIs to the web without authentication or rate limiting. Otherwise, you may be vulnerable to DDoS attacks.\nGeneral Node.JS security best practices‚Äã\nOften you will use Remotion alongside other Node.js dependencies.\nYou should only install dependencies you trust, since they can run arbitrary code in their postinstall scripts.\nDependencies, including Remotion, may have known vulnerabilities which you can list with the npm audit command.\nReporting of security vulnerabilities‚Äã\nIf you believe to have found a security vulnerability, you can report it to hi@remotion.devImprove this pageAsk on DiscordGet helpLast updated on Dec 21, 2024PreviousSupport PolicyNextChromium flagsEnvironment variablesCredentials on the webdisableWebSecurity flagDDoS attacksGeneral Node.JS security best practicesReporting of security vulnerabilities"
  }
]
